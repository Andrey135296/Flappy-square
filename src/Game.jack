class Game {
   field Player player;
   field Pipe pipe1;
   field Pipe pipe2;
   field Pipe pipe3;
   field char key;      
   field char last_key;
   field boolean first_jump;
   field boolean exit;
   field boolean reset;
   field boolean quit;
   field int pipe_interaction;
   field int frames1;

   constructor Game new(int d) {
      let player = Player.new(8, 128);
      do Pipe.init(2, 50);
      let pipe1 = Pipe.new(614+((560/3)*0), 128);
      let pipe2 = Pipe.new(614+((560/3)*1), 128);
      let pipe3 = Pipe.new(614+((560/3)*2), 128);
      return this;
   }

   method void dispose() {
      do player.dispose();
      do pipe1.dispose();
      do pipe2.dispose();
      do pipe3.dispose();
      do Memory.deAlloc(this);
      return;
   }

   method void handle_input() {
      let key = Keyboard.keyPressed();
      if (key = 81) { 
         let exit = true; 
         let quit = true;
      }
      if ((key = 82) & (~first_jump)) { 
         let exit = true; 
         let reset = true;
      }
      if ((key = 32) & (~(last_key=32))) { 
         do player.jump();
         if (first_jump) {
            let first_jump = false;
            do LCGRandom.setSeed(frames1);
            do Screen.setColor(false);
            do Output.moveCursor(22,0);
            do Output.moveCursor(21,0);
         }
      } 
      let last_key = key;
      return;
   }

   method void handle_pipe(int pipe_interaction) {
      if (pipe_interaction=2) {
         let exit = true;
      }
      return;
   }

   method void refresh() {
      do player.update();  
      if ((~first_jump)) { 
         do pipe1.update();
         do pipe2.update();
         do pipe3.update();
         do handle_pipe(pipe1.is_player_inside_me(player.x(),player.y()));
         do handle_pipe(pipe2.is_player_inside_me(player.x(),player.y()));
         do handle_pipe(pipe3.is_player_inside_me(player.x(),player.y()));
      }
      return;
   }

   method void render_vitals() {
         let frames1 = frames1 + 1;
         if (frames1 < 0) { 
            let frames1 = 0;
            if (first_jump) {do Output.moveCursor(21,0);} 
            else {do Output.moveCursor(22,0);}
         }
         do Output.moveCursor(22,0);
         if (first_jump) {
            do Output.moveCursor(21,0);
         }
      return;
   }

   method boolean run() {
      let key = 0;
      let last_key = 0;
      let first_jump = true;
      let exit = false;
      let reset = false;
      let quit = false;
      let frames1 = 0;

      while (~exit) {
         do handle_input();
         do refresh();
         do render_vitals();
         do Sys.wait(2);
      }

      while ((~reset)) {
         let key = Keyboard.keyPressed();
         if (key = 81) {
            return false;
         }
         if (key = 82) { 
            let reset = true;
         }
      } 
      do reset();  
      return true;
   }

   method void reset() {
      do Screen.clearScreen();
      do player.reset(8, 128);
      do pipe1.reset(614+((560/3)*0), 128);
      do pipe2.reset(614+((560/3)*1), 128);
      do pipe3.reset(614+((560/3)*2), 128);
      return;
   }
}